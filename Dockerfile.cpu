# Usar a imagem oficial do ROS Noetic
FROM osrf/ros:noetic-desktop-full

# Atualizar e instalar dependências básicas como root
RUN apt-get update && apt-get install -y \
    gnupg2 \
    curl \
    lsb-core \
    vim \
    wget \
    python3-pip \
    libpng16-16 \
    libjpeg-turbo8 \
    libtiff5

# Criar o usuário y o mais cedo possível
RUN useradd -m -d /home/y -s /bin/bash y && \
    echo "y:y2024" | chpasswd && \
    adduser y sudo && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Definir o usuário y como padrão
USER y

# Definir o diretório de trabalho padrão
WORKDIR /home/y

# Instalar dependências adicionais como root
USER root
RUN apt-get install -y \
        # Base tools
        cmake \
        build-essential \
        git \
        unzip \
        pkg-config \
        python3-dev \
        # OpenCV dependencies
        python3-numpy \
        # Pangolin dependencies
        libgl1-mesa-dev \
        libglew-dev \
        libpython3-dev \
        libeigen3-dev \
        apt-transport-https \
        ca-certificates \
        software-properties-common

# Adicionar repositório do Sublime Text (como root)
RUN curl -fsSL https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add - && \
    add-apt-repository "deb https://download.sublimetext.com/ apt/stable/" && \
    apt-get update && \
    apt-get install -y sublime-text

# Build OpenCV (3.0 or higher should be fine)
RUN apt-get install -y python3-dev python3-numpy 
RUN apt-get install -y python-dev python-numpy
RUN apt-get install -y libavcodec-dev libavformat-dev libswscale-dev
RUN apt-get install -y libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev
RUN apt-get install -y libgtk-3-dev

RUN cd /tmp && git clone https://github.com/opencv/opencv.git && \
    cd opencv && \
    git checkout 4.4.0 && \
    mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_EXAMPLES=OFF  -D BUILD_DOCS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_TESTS=OFF -D CMAKE_INSTALL_PREFIX=/usr/local .. && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/opencv

# Build Pangolin
RUN cd /tmp && git clone https://github.com/stevenlovegrove/Pangolin && \
    cd Pangolin && git checkout v0.6 && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-std=c++11 .. && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/Pangolin

# Instalação das dependências do Spinnaker
RUN apt-get install -y libusb-1.0-0-dev usbutils udev wget inetutils-ping

# Copiar e instalar o Spinnaker SDK
COPY spinnaker-4.0.0.116-amd64 /home/y/spinnaker-4.0.0.116-amd64
WORKDIR /home/y/spinnaker-4.0.0.116-amd64

# Executar o script de instalação de forma não interativa
RUN chmod +x install_spinnaker.sh && \
    yes | ./install_spinnaker.sh && \
    usermod -aG flirimaging y

# Voltar ao usuário y
USER y

# Copiar o arquivo ros_entrypoint.sh com o proprietário correto
COPY --chown=y:y ros_entrypoint.sh /home/y/ros_entrypoint.sh

# Definir permissões de execução como root
USER root
RUN chmod +x /home/y/ros_entrypoint.sh
USER y

# Definir variáveis de ambiente
ENV ROS_DISTRO noetic
ENV LANG en_US.UTF-8

# Definir o ponto de entrada
ENTRYPOINT ["/home/y/ros_entrypoint.sh"]

# terminal colors with xterm
ENV TERM xterm

# Clone ORB_SLAM3 repository no diretório do usuário y
RUN git clone -b v0.4-beta https://github.com/UZ-SLAMLab/ORB_SLAM3.git /home/y/ORB_SLAM3

# Definir o diretório de trabalho para o ORB_SLAM3
WORKDIR /home/y/ORB_SLAM3

# Definir o comando padrão
CMD ["bash"]
